spring.application.name=KafkaConsumers

server.port=0

# Igual a configuração do producer
spring.kafka.consumer.bootstrap-servers=localhost:9092,localhost:9094
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Define o group id dos consumers da aplicação
# Todos as aplicações que tiverem esse group id, trabalharão em paralelo para consumir os tópicos
spring.kafka.consumer.group-id=product-created-events

# Define quais que são os pacotes (e consequentemente as classes) que o consumidor Kafka irá aceitar para fazer a desserialição
# É recomendado que se especifique/limite apenas os pacotes/classes que realmente serão utilizadas.
#   Exemplo: spring.kafka.consumer.properties.spring.json.trusted.packages=com.myapp.model,com.myapp.dto
#           Assim apenas classes dentro do pacote model e dto serão aceitos para as mensagens serem desserializadas
# Por que não é recomendado usar `*` para aceitar que qualquer classe sirva para ser desserializada nela?
#   R: Um atacante pode mandar uma mensagem com conteúdo malicioso, em que o Kafka tenta desserializar ela numa classe
#      importante que não pode ser acessada. Dessa forma, o atacante pode conseguir criar uma instância dessa classe
#      (na desserialização da mensagem) e pode conseguir injetar código malicioso nela.
spring.kafka.consumer.properties.spring.json.trusted.packages=com.guilherme.course.events