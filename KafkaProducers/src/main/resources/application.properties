spring.application.name=KafkaCourse

server.port=8080

# Configura os bootstrap servers
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094

# Configura os serializadores (da chave e do valor)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


# Configura o número mínimo de acks que o líder tem que retornar para o producer para considerar a escrita bem sucedida
spring.kafka.producer.acks=all


# Configura a quantidade máxima de vezes que vai tentar reenviar mensagens que deram falha
# Nesse caso, faz no máximo 10 reenvios da mensagem
#spring.kafka.producer.retries=10

# Configura o intervalo de tempo que vai fazer os reenvios
# Nesse caso, faz reenvios a cada 1s
#spring.kafka.producer.properties.retry.backoff.ms=1000


#######################################################################################################################
# CONFIGURAÇÕES PARA RETRY MAIS RECOMENDADAS:
#######################################################################################################################
# Configura o tempo máximo total que o producer aguardará para confirmar se uma mensagem foi entregue com sucesso
# Inclui o tempo de retry, tempo de espera na fila interna e tempo de network I/O
# Valor: 120000ms (2 minutos)
spring.kafka.producer.properties.delivery.timeout.ms=120000


# Configura o tempo que o producer aguarda antes de enviar um batch de mensagens
# Valor 0 = envia imediatamente (sem batching), priorizando latência baixa sobre throughput
# Valores maiores agrupam mais mensagens por batch, melhorando throughput mas aumentando latência
spring.kafka.producer.properties.linger.ms=0

# Configura o tempo máximo que o producer aguarda por uma resposta do broker para uma única requisição
# Inclui tempo de network + processamento do broker
# Valor: 30000ms (30 segundos)
spring.kafka.producer.properties.request.timeout.ms=30000

# Diferença entre o `delivery.timeout` e o `request.timeout`
# * `request.timeout` -> é o tempo que uma única requisição pode durar
#       Exemplo: se for 30s, então a requisição vai esperar por 30s uma resposta.
#                Se não tiver uma dentro desse tempo, então a requisição dá falha automaticamente.
#
# * `delivery.timeout` -> é o tempo TOTAL que toda a operação pode durar
#       Exemplo: se for 2min, então pode ficar fazendo retries, etc durante esse tempo.
#                Se uma requisição demorar 30s para dar falha, então poderá fazer apenas 4 retries.
#                Se uma requisição demorar 1s para dar falha, então poderá fazer 120 retries.

#######################################################################################################################
# FIM DAS CONFIGURAÇÕES DE RETRY
#######################################################################################################################
